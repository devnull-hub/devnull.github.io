





































































































































































































































[{"categories":["github","git"],"contents":"GIT OOPS! Question\rYep\u0026hellip; I have absolutely no idea what I meant by \u0026lsquo;Fix foobar\u0026rsquo; 6 months ago.\rTrying to write better commits fixed bug on landing page vs. fix: bug preventing users from submitting the subscribe form\nAssuming you already understand basic Git workflow. If not, I suggest reading through the Git Handbook.\nIt is also important to note that you should follow your team\u0026rsquo;s conventions\nThe Anatomy of a Commit Message Basic: git commit -m \u0026lt;message\u0026gt; Detailed:\ngit commit -m \u0026lt;title\u0026gt; -m \u0026lt;description\u0026gt; Tthoughtful commits, consider the following:\nWhy have I made these changes? What effect have my changes made? Why was the change needed? What are the changes in reference to? Assume the reader does not understand what the commit is addressing.\nMake clear why that change was made, and note if it is crucial for the functionality or not.\nExample:\ngit commit -m \u0026#39;Add wdiget\u0026#39; git commit -m \u0026#39;Add wdiget to nav items to prevent them from overlapping the logo\u0026#39; Tip\rVScode Git Blame extension adds git blame information to your vscode compatible view. Git historical information are Git History and GitLens.\rExample commit types:\nfeat – a new feature is introduced with the changes fix – a bug fix has occurred chore – changes that do not relate to a fix or feature and don\u0026rsquo;t modify src or test files (for example updating dependencies) refactor – refactored code that neither fixes a bug nor adds a feature docs – updates to documentation such as a the README or other markdown files style – changes that do not affect the meaning of the code, likely related to code formatting such as white-space, missing semi-colons, and so on. test – including new or correcting previous tests perf – performance improvements ci – continuous integration related build – changes that affect the build system or external dependencies revert – reverts a previous commit Full Conventional Commit Example fix: fix foo to enable bar This fixes the broken behavior of the component by doing xyz. BREAKING CHANGE Before this fix foo wasn\u0026#39;t enabled at all, behavior changes from \u0026lt;old\u0026gt; to \u0026lt;new\u0026gt; Closes XXXX-12345 Example conventions, it\u0026rsquo;s helpful to include guidelines for commits in a contributing or README markdown file within your projects.\nLearn more about Conventional Commit SemVer.org and here.\nCommit Message Comparisons Good feat: improve performance with lazy load for images chore: update python dependency to latest version fix: bug preventing users from submitting the subscribe form update: incorrect client phone number within footer body per client request Bad fixed bug on landing page Changed style oops I think I fixed it this time? empty commit messages Summary Writing good commit messages is an extremely beneficial skill, and it helps to communicate and collaborate. Commits serve as an archive of changes. Need to establish a set of agreed-upon standards that can be followed, but as long as your team agrees upon a convention.\n","date":"December 27, 2022","image":"https://devnall.io/images/post/git/gitops_hue1bc2a89d19a6f5e5f7372def848e8ce_44077_650x0_resize_box_3.png","permalink":"/blog/git/commit-msg/","title":"Write Better Commit Messages"},{"categories":["web"],"contents":"Let’s Encrypt Wildcard Certifications Assuming Debian based OS\nStep 1. Install certbot APT Get the latest version certbot.\nUpdate apt package manager and applications.\napt update \u0026amp;\u0026amp; apt upgrade Install certbot\nsudo apt install certbot The TXT DNS record value to add to DSN Server. This allows Let’s Encrypt to verify with domain name provider rather than the server on a per subdomain basis.\nRequest a value for the TXT record from Let’s Encrypt with:\nReplace *.example.com with the name of your domain.\nsudo certbot certonly \\ --server https://acme-v02.api.letsencrypt.org/directory \\ --manual --preferred-challenges dns -d *.exaple.com Let’s Encrypt will ask you about exposing your server IP address to log the verification, select Yes then it will give you the host and value for the new TXT record you need to create:\nPlease deploy a DNS TXT record under the name _acme-challenge.example.com with the following value: yB0AXXXXXXORZXTwzeXXXXXXXXXXXXXXXXmOoA1-XXX Before continuing, verify the record is deployed. Info\rThis might take a while to sync the new record. Some Providers take up to 30min, 72hrs or longer.\rTest to see if the record has been synced by running the command (again replacing the domain name):\nnslookup -type=TXT _acme-challenge.example.com Error\rServer can’t find _acme-challenge.example.com: NXDOMAIN error if the record hasn’t synced\rSuccess answer like this if it has:\nServer: 192.XXX.XXX.XXX Address: 192.XXX.XXX.XXX#XX Non-authoritative answer: _acme-challenge.example.com text = \u0026#34;5GFgXXWfT5V-XXXXXWfT5XXXX\u0026#34; Once the record is synced continue the certbot process by pressing enter and you will see the usual Congratulations! Your certificate and chain have been saved at message. You can now use these new certification files to add to your web server.\n","date":"December 27, 2022","image":"https://devnall.io/images/post/placeholder_hu21f30feb008e349d971c5f8d0c1430c5_4711_650x0_resize_box_3.png","permalink":"/web/certbot/","title":"Let’s Encrypt Wildcard Certifications"},{"categories":["hugo","tips"],"contents":"How to modify themes Hugo Use non-destructive practice for Hugo themes. Hugo is designed for customization and follows a site generation workflow that works a lot like layers in photo editing software.\nAdding a custom index.html file in the site layouts folder overrides the one in the theme folder. To change the index.html code without changing the theme code. Customizing the theme CSS styles requires leveraging the layouts folder override.\nTo modify the CSS take advantage of cascading. Here is an example:\nOverride the head.html file by copying the head.html file from the themes/\u0026lt;theme\u0026gt;/layouts/partials folder into a new folder in the site layouts/partials. This new head.html file now overrides the theme head.html. Add a link to the new override.css file. The code below shows the existing link to the style.css and the new override.css.\n{{ $style := resources.Get \u0026#34;scss/style.scss\u0026#34; | resources.ToCSS | minify }} \u0026lt;link href=\u0026#34;{{ $style.Permalink }}\u0026#34; rel=\u0026#34;stylesheet\u0026#34; /\u0026gt; {{ $override := resources.Get \u0026#34;css/override.css\u0026#34; }} \u0026lt;link href=\u0026#34;{{ $override.Permalink }}\u0026#34; rel=\u0026#34;stylesheet\u0026#34;/\u0026gt; Summary Hugo themes are easy to add and swap, simply copy or pull the theme files to site\u0026rsquo;s themes folder and update the config.toml theme property to the name of the theme folder.\nThemes are tightly coupled to their data schemas, so do not expect to take a site with full content and swap the theme. Might need to port data to match the new data schema.\nHugo themes are easy to override and build upon without the need to directly change the theme files. The Hugo theme approach is simple yet powerful, it is one of the reasons Hugo is my preferred static site generator.\nCheck out the something interesting:\nHugo Adding Custom Notices ","date":"December 26, 2022","image":"https://devnall.io/images/post/hugo/theme-layout_huea4b75fdd8c7038788e21ce24f738933_123547_650x0_resize_q90_box.jpg","permalink":"/blog/hugo/tips/mod-theme/","title":"Modify Themes Hugo"},{"categories":["Hugo","web"],"contents":"Hugo Adding Custom Notices Warning\rMight be batter way to complete this with out destroying theme.\rModify Themes Hugo How to modify themes for Hugo\nAdd these notices More Rich Content to current theme geeky_hugo. This might be different base on theme layout.\nIn the root of the themes directory navigate to themes/\u0026lt;name\u0026gt;/assets/scss\nCurrent theme has four files modification to add custom notices from coder.\nThe _notices.scss and notice.html need to be copied to current themes folder based on it\u0026rsquo;s layout. _variables.scss Only need coloring sections add. Finaly step is to import into @import 'notices.scss';\nFiles:\nassets/scss/_notices.scss assets/scss/_variables.scss layouts/shortcodes/notice.html assets/scss/style.scss File: _notices.scss\n... TRUNCATED OUTPUT ... .notice { border-radius: 0.2rem; position: relative; margin: 2rem 0; padding: 0 0.75rem; overflow: auto; .notice-content { display: block; margin: 2rem 2rem; } } .notice.note { background-color: $bg-color-notice-note-content; ... TRUNCATED OUTPUT ... File: _variables.scss\n// Notice colors $fg-color-notice-note-icon: #5e35b1 !default; $bg-color-notice-note-title: #673ab71a !default; $bg-color-notice-note-content: #7e57c21a !default; ... TRUNCATED OUTPUT ... $fg-color-notice-example-icon: #6d4c41 !default; $bg-color-notice-example-title: #7955481a !default; $bg-color-notice-example-content: #8d6e631a !default; ... TRUNCATED OUTPUT ... In the theme root directory add the following assets/scss/style.scss\nFile: style.scss\n@import \u0026#39;notices.scss\u0026#39;; Shortcodes Code From the root of Hugo layouts/shortcodes\nWarning\rThe shortcodes might not be created, so create it if required.\rUse the following code that can be referenced in markdown code.\nFile: notice.html\n{{- $type := .Get 0 -}} {{- $title := .Get 1 | default $type -}} {{- $inner := .Inner | .Page.RenderString | chomp -}} {{- $icon := dict \u0026#34;note\u0026#34; \u0026#34;fa-sticky-note\u0026#34; \u0026#34;tip\u0026#34; \u0026#34;fa-lightbulb-o\u0026#34; \u0026#34;example\u0026#34; \u0026#34;fa-file-text\u0026#34; \u0026#34;question\u0026#34; \u0026#34;fa-question\u0026#34; \u0026#34;info\u0026#34; \u0026#34;fa-exclamation-circle\u0026#34; \u0026#34;warning\u0026#34; \u0026#34;fa-exclamation-triangle\u0026#34; \u0026#34;error\u0026#34; \u0026#34;fa-times-circle\u0026#34; -}} \u0026lt;div class=\u0026#34;notice {{ $type }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;notice-title\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fa {{ index $icon $type }}\u0026#34; aria-hidden=\u0026#34;true\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;{{ i18n $title | default $title | humanize }} \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;notice-content\u0026#34;\u0026gt; {{- $inner -}} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Examples: Shortcodes Note\rOne note here.\rTip\rI\u0026rsquo;m giving a tip about something.\rExample\rThis is an example.\rQuestion\rIs this a question?\rInfo\rNotice that this box contain information.\rWarning\rThis is the last warning!\rError\rThere is an error in your code.\rSummary Hugo themes are easy to add and swap, simply copy or pull the theme files to site\u0026rsquo;s themes folder and update the config.toml theme property to the name of the theme folder.\nThemes are tightly coupled to their data schemas, so do not expect to take a site with full content and swap the theme. Might need to port data to match the new data schema.\nHugo themes are easy to override and build upon without the need to directly change the theme files. The Hugo theme approach is simple yet powerful, it is one of the reasons Hugo is my preferred static site generator.\nCheck out the something interesting:\nModify Themes Hugo How to modify themes for Hugo\n","date":"December 26, 2022","image":"https://devnall.io/images/post/hugo/custom_notices_hu99b68cc0ca4b1e2b886302b9869e8861_23558_650x0_resize_box_3.png","permalink":"/blog/hugo/tips/custom-notices/","title":"Hugo Adding Custom Notices"},{"categories":["hugo"],"contents":"Content Organization Trying to find a good way to organize content and this looks like this could be completed with Page Bundles.\nPage Bundles The illustration shows three bundles.\nNote: that the home page bundle cannot contain other content pages, although other files (images etc.) are allowed.\nWithout any additional configuration, the following will automatically work:\n. └── content └── about | └── index.md // \u0026lt;- https://example.com/about/ ├── posts | ├── firstpost.md // \u0026lt;- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u0026lt;- https://example.com/posts/happy/ness/ | └── secondpost.md // \u0026lt;- https://example.com/posts/secondpost/ └── quote ├── first.md // \u0026lt;- https://example.com/quote/first/ └── second.md // \u0026lt;- https://example.com/quote/second/ Summary Information presented here is based on Page Bundles. I will revision if errors or issues occur.\n","date":"December 24, 2022","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/tips/content-org/","title":"Hugo Content Organization"},{"categories":["hugo"],"contents":"Make Site More Informative Add Reading Time to current theme.\nAdd Reading Time to list Page Showing Reading Time is a great addition, by helping visitors to decide if the article is interesting enough to read..ReadingTime is a function of Hugo - which is calculated from the number of words in markdown content.\nAs this is a built in function, this can added.\nUpdate Theme This will vary based on theme and files might be different.\nOpen \u0026lt;theme\u0026gt;/layouts/_defaults/single.html \u0026lt;theme\u0026gt;/layouts/_defaults/post.html and add find author section in geeky-hugo theme location this in:\nAuthor and Publish Date are generated. Notice the \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; section.\n... TRUNCATED OUTPUT ... \u0026lt;ul class=\u0026#34;list-inline card-meta d-flex align-items-center mb-3\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item d-flex align-items-center\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-user me-2\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;a href=\u0026#34;{{`about` | relLangURL}}/\u0026#34;\u0026gt;{{site.Params.author}}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item d-flex align-items-center\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-calendar me-2\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;span\u0026gt;{{ time.Format \u0026#34;:date_long\u0026#34; .PublishDate }}\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ... TRUNCATED OUTPUT ... Add the following to include read time.\n\u0026lt;span class=\u0026#34;reading\u0026#34;\u0026gt;{{ .ReadingTime }} {{ cond (eq .ReadingTime 1) \u0026#34;minute\u0026#34; \u0026#34;minutes\u0026#34; }} read\u0026lt;/span\u0026gt; Completed code with clock icon added with \u0026lt;i class=\u0026quot;fas fa-clock\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; just lookup Font Awesome Icons\n\u0026lt;li class=\u0026#34;list-inline-item d-flex align-items-center\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-clock\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;span class=\u0026#34;reading\u0026#34;\u0026gt;{{ .ReadingTime }} {{ cond (eq .ReadingTime 1) \u0026#34;minute\u0026#34; \u0026#34;minutes\u0026#34; }} read\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; Summary Minor update to improve information. Check out the something interesting: Hugo running on Android ","date":"December 24, 2022","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/tips/site-info/","title":"Hugo Improve Usability"},{"categories":["android","hugo"],"contents":"Hugo Running on Android Assumption turmux already installed.\nTermux on Android needs to be install. Use apt or pkg to install hugo.\nStep 1 Install Hugo apt install hugo Start server Will get the following:\nError\r.hugo_build.lock: function not implemented\rrun with --noBuildLock\nhugo server --noBuildLock\rStart building sites …\rhugo v0.109.0+extended android/arm64 BuildDate=unknown\r| EN\r-------------------+-----\rPages | 35\rPaginator pages | 0\rNon-page files | 6\rStatic files | 1\rProcessed images | 64\rAliases | 10\rSitemaps | 1\rCleaned | 0\rBuilt in 981 ms Step 2. Create New Posts Syntax to create a new post: hugo new posts/POST_NAME.md\nCreate a post called index.md hugo new posts/hugoandroid/index.md this creates a directory named posts\nStart writing in markdown and publish in HTML.\nSummary Now we can build with markdown on the go and publish on the fly. Future post setting up Android with necessary tools.\n","date":"December 24, 2022","image":"https://devnall.io/images/post/banner_android_hu409a039fcebec6844eeabc69385732bb_118729_650x0_resize_box_3.png","permalink":"/blog/hugo/android/","title":"Hugo running on Android"},{"categories":["web","hugo"],"contents":"Hugo Setup with git This blog content is generated with Hugo static site generator and integrated with GitHub Pages. This post will step cover publishing and pushing the newest content to GitHub Pages.\nSuggested reading Getting Started with Hugo: Learn more on GitHub. Complete documentation is available at Hugo Documentation.\nStep 1. Create Repositories on GitHub Assumptions already familiar with git commands and GitHub.\nCreate two repos\nName Access Purpose blog public Working local edits for changing adding content myblog.github.io public Syncing output of public folder to github or web server GitHub Pages There are two types of GitHub Pages:\nUser/Organization Pages https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/ Project Pages https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/ Step 2. Create New Site With hugo command create new site blog and change into the directory:\nhugo new site blog cd to blog Run initialize the directory as a git repository\ngit init Initialized empty Git repository... Add the github repository as a remote using git remote\nSubstitute \u0026lt;USERNAME\u0026gt; with your username.\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/blog.git git fetch --all git pull origin main At this point need to choose a them to continue.\nChoose themes Step 3. Installation theme Using the mainroad theme.\nFrom the project\u0026rsquo;s blog root directory, run:\ngit clone https://github.com/vimux/mainroad.git themes/mainroad\nNote\rIf not planning to making any significant changes but want to track and update the theme, add it as a git submodule via the following command:\rgit submodule add https://github.com/vimux/mainroad.git themes/mainroad Edit config.toml\nSpecify mainroad as default theme in the config.toml file.\ntheme = \u0026#34;mainroad\u0026#34; Change baseurl baseurl = \u0026quot;https://github.com/myblog-hub/myblog.github.io/\u0026quot; this is what will be pointing at the public part of the repo.\nInfo\rMake sure to end baseurl with a / and also confirm baseurl is set to Project Pages https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/ If any problems when publishing tweak until works.\rStep 5. Preview site locally From the project\u0026rsquo;s blog root directory, run:\nhugo server ... TRUNCATED OUTPUT ... Watching for config changes in C:\\..\\..\\blog\\myblog.github.io\\config.toml Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) ... TRUNCATED OUTPUT ... Open browser to http://localhost:1313\nStep 4. Create New Posts Syntax to create a new post: hugo new posts/POST_NAME.md\nCreate a post called mypost.md hugo new posts/mypost.md this creates a directory named posts\nInfo\rDepending on the theme this might need to be updated in the configuration config.toml as might be reference as post.\rStep 5. Production repo setup In production repo need to make sure have one commit and main branch if this was not already done through GitHub Page.\nIf README.md not added to remote repo then complete following or just add submodule\ngit clone https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io cd myblog.github.io git checkout -b main add README.md git add . git commit -m \u0026#34;adding readme.md\u0026#34; git push origin main Add Submodule From the project\u0026rsquo;s blog root directory add submodule, run:\ngit submodule add -b main https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git public Warning\rThis might fail due to running hugo server cammand, just delete the public folder it will get recreated.\rStep 6. Generate static files Run with the theme used mainroad\nhugo -t mainroad Confirm public dir has been created.\n. ├── archetypes ├── assets ├── config ├── config.toml ├── content ├── data ├── layouts ├── netlify.toml ├── **public** ├── resources ├── static └── themes Confirm remote repo has been added git remote -v:\ngit remote -v origin https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git (fetch) origin https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git (push) Commit changes to production repo:\ncd public git add . git commit -m \u0026#34;init commit\u0026#34; git push origin main Step 7. GitHub Pages From the https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git Settings page check Pages section and make sure Branch main /root is selected.\nCheck the actions page and can monitor the workflows deployment.\nIdeas Hosting on Azure Azure storage static Azure Pipelines Azure Container Registry Azure Container Registry Tasks Hosting on AWS Cloudflare Summary The setup is great now website under full source control, build it anytime and host it literally anywhere. That’s not the end of the story!\n","date":"December 24, 2022","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/initial-setup/","title":"Hugo Static Blog Site Github"},{"categories":["vcode"],"contents":"VSCode Extensions for Markdown Recommend vscode Markdown extensions.\nMarkdown All in One Markdown All in One is a must one for editing Markdown. It contains Markdown preview, keyboard shortcuts, auto preview, and more\u0026hellip;.\nThe shortcuts will make editing Markdown much easy:\nPath completion:\nDictionary Completion Dictionary Completion extension tab complete words and hopefully reduce spelling errors:\nPaste Image Insert more screenshots to Markdown files. Paste Image helps save images with greenshot. This extension supports Mac/Windows/Linux.\nDraw.io Need to draw diagrams. Extension Draw.io Integration:\nKanbn Kanbn stores the kanban board and tasks inside repository as markdown files. Easy to view and edit tasks using any editor with the benefit Git\u0026rsquo;s version control and collaboration features project.\nSummary Help speed up blogging experience by publishing in markdown then converting HTML with Hugo. Will update as find more useful vscode extensions.\n","date":"December 24, 2022","image":"https://devnall.io/images/post/vscode-md_hu51be5c20beaf80d9f3111e924a350f35_1055416_650x0_resize_box_3.png","permalink":"/blog/vscode/exten-markdown/","title":"VSCode Extensions for Markdown"},{"categories":["Linux","SSH"],"contents":"SSH Tunnel A reverse SSH tunnel allows a local service to be securely accessible by a remote connection.\nUnderstanding Reverse SSH Tunnels Service on local computer that is running on port 80. Want to access this service from a remote computer, but a firewall is in the way.\nSetup Host Type IP Address Description Internal 192.168.1.6 Internal IP address of the local service Public 159.223.180.93 public IP address of the remote server Reverse SSH Tunnel Example Confirm listening ports Local:\nLocal server running web server on port 80 and ssh on port 22.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN tcp6 0 0 :::80 :::* LISTEN Remote:\nRemote client running SSH services\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN Establishing a reverse SSH tunnel:\nFrom the local server run the following command to establish a SSH tunnel:\nssh -N -R localhost:8888:192.168.1.6:80 root@159.223.180.93 -N is a flag to just forward ports and not execute remote commands -R is the reverse SSH tunnel flag that forwards remote connections to the local side localhost is the host on the remote server that will bind to the local service 8888 is the port that the remote server will listen on 192.168.1.6 is the internal IP address of the local service 80 is the port of the local service root is the SSH user of the remote server 159.223.180.93 is the public IP address of the remote server Confirm listening ports Local\nNote\rLocal host no change on listening services.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN tcp6 0 0 :::80 :::* LISTEN Remote\nAfter executing the reverse SSH tunnel command, the local service at 192.168.1.6:80 will be accessible on the remote machine at localhost:8888.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 127.0.0.1:8888 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN tcp6 0 0 ::1:8888 :::* LISTEN Shorthand Tip\rRemote command execution or pseudo terminal will be allocated for this connection.\nssh -R 8888:localhost:80 root@159.223.180.93 Change the port number for other services.\nInfo\rDon’t need to include localhost of the local machine because it is default Default SSH port is 22, so don’t need to specify this -N flag is optional. Functionality will be the same Summary Greate way to access service on local computer that is running on port 80 that is running behind a firewall to access this service from remote computer.\nCheck out: SSH Tunnel SSH Proxy ","date":"December 14, 2022","image":"https://devnall.io/images/post/linux/ssh/ssh_reverse_hub076a556219325752d3f0d64f6ea18a0_25348_650x0_resize_box_3.png","permalink":"/blog/linux/ssh/reverse/","title":"SSH Reverse Tunnel"},{"categories":["Linux","SSH"],"contents":"SSH Tunnel How to setup a basic SSH tunnel to access remote server resources that may be blocked by a firewall or simply inaccessible over the internet.\nUnderstanding SSH Tunnels Remote server that is running on port 80. Access this service from local computer, but a firewall is in the way.\nSetup Host Type IP Address Description Local localhost Remote 192.168.0.6 Internal IP address of the local service To bypass the firewall restrictions, send the remote service over the SSH port via a tunnel.\nSSH Tunnel Example Confirm listening ports Remote\nRemote server running web server on port 80 and ssh on port 22.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN Note\rLocal host is not listening for any services, so will not return anything.\rFrom the remote run the following command to establish a SSH tunnel:\n\u0026gt; ssh -N -L localhost:8888:localhost:80 root@192.168.0.93 -N is a flag to just forward ports and not execute remote commands -L forwards local connections to the remote side localhost is the host on the local machine that will bind to the remote service 8888 is the port that the local machine will listen on localhost is the internal IP address of the remote service 80 is the port of the remote service root is the SSH user of the remote server 192.168.0.93 is the public IP address of the remote server The remote service at localhost:80 will be accessible on the local machine at http://127.0.0.1:8888.\nInfo\rSSH can be assigned another port just add -p 2222 of the remote server.\rConfirm listening ports Local\nLocal is now established local connection port 8888 to remote system 192.168.0.93:80.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 127.0.0.1:8888 0.0.0.0:* LISTEN Shorthand Tip\rRemote command execution or pseudo terminal will be allocated for this connection.\n\u0026gt; ssh -L 8888:localhost:80 root@192.168.0.93 Change the port number for other services.\nInfo\rDon’t need to include localhost of the local machine because it is default Default SSH port is 22, so don’t need to specify this -N flag is optional. Functionality will be the same Question\rMight be able to trace tunnel through lsof. Need to explore more.\n\u0026gt; lsof -a -i -c \u0026#39;/^ssh$/\u0026#39; Summary Greate way to access remote services that are private and not exposed to the internt or that are running behind a firewall to access this service from local computer.\nCheck out: SSH Reverse Tunnel ","date":"December 14, 2022","image":"https://devnall.io/images/post/linux/ssh/ssh_tunnel_hu2149426542e31828b53872e1484bd54b_23744_650x0_resize_box_3.png","permalink":"/blog/linux/ssh/tunnel/","title":"SSH Tunnel"},{"categories":["Linux","SSH"],"contents":"SSH Proxy Tunnel Setup an SSH tunnel proxy server as an intermediary between a local computer and remote server that has an inaccessible resource or service.\nSetup Host Type IP Address Description Public 192.168.0.83 Public IP address of the local service Public 159.223.0.93 Public IP address of the remote server SSH Proxy Tunnel Example Send the remote service over the SSH port via a tunnel.\nConfirm listening ports Local:\nLocal host is not listening for any services, so will not return anything.\nPorxy\nPorxy server running ssh on port 22.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN Remote\nRemote server running web server on port 80 and ssh on port 22.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN tcp 0 0 0.0.0.0:80 0.0.0.0:* LISTEN tcp6 0 0 :::22 :::* LISTEN tcp6 0 0 :::80 :::* LISTEN From the local server run the following to establish a SSH proxy tunnel:\nssh -N -L localhost:8888:192.168.0.83:80 root@192.168.0.93\n-N is a flag to just forward ports and not execute remote commands -L forwards local connections to the remote side localhost is the host on the local machine that will bind to the remote service 8888 is the port that the local machine will listen on 192.168.0.83 is the public IP address of the remote service 80 is the port of the remote service root is the SSH user of the remote server 192.168.0.93 is the public IP address of the proxy server Local\nThe SSH tunnel is established for the service at 192.168.0.83:80 will be accessible on the local machine at localhost:8888 via the proxy server at 192.168.0.93.\n\u0026gt; netstat -ntl Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 0 0 127.0.0.1:8888 0.0.0.0:* LISTEN tcp6 0 0 ::1:8888 :::* LISTEN Shorthand Tip\rRemote command execution or pseudo terminal will be allocated for this connection.\nssh -L 8888:192.168.0.83:80 root@192.168.0.93 Change the port number for other services.\nInfo\rDon’t need to include localhost of the local machine because that is the default Default SSH port is 22, so don’t need to specify that either -N flag is optional. Functionality will be the same whether or not include it Summary Greate way to access service on local computer that is running on port 80 that is running behind a firewall to access this service from remote computer.\nCheck out: SSH Reverse Tunnel SSH Tunnel ","date":"December 14, 2022","image":"https://devnall.io/images/post/linux/ssh/ssh_proxy_huf50c1b51d0107a2acf4e4b081c551508_44622_650x0_resize_box_3.png","permalink":"/blog/linux/ssh/proxy/","title":"SSH Proxy"},{"categories":null,"contents":" All posts Posts by Tag Posts in Series Posts by Year ","date":"March 6, 2022","image":"https://devnall.io/images/post/linux/ssh/ssh_proxy_huf50c1b51d0107a2acf4e4b081c551508_44622_650x0_resize_box_3.png","permalink":"/archive/","title":"Archives"},{"categories":["hugo","web"],"contents":"Hugo static HTML and CSS website generator Hugo is a static HTML and CSS website generator written in Go and edited in markdown. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website. With its amazing speed and flexibility, Hugo makes building websites fun again.\nLearn more on GitHub. Complete documentation is available at Hugo Documentation.\nStep 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building.\nHaving nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n","date":"January 24, 2021","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/getting-started/","title":"Getting Started with Hugo"},{"categories":null,"contents":"This blog is brought to you by an Infrastructure IT Consultant. The goal of this content is to create easy to understand posts about creating complicated projects so anyone can follow them like a recipe and to help capture my ideas and thoughts.\nI architect, implement, administer and troubleshoot servers, network, storage and infrastructure devices local and cloud-based with an interest in DevSecOps. I write about things I am familiar with, things I am learning, and the things that I have had to understand in order to help others understand.\nFor more details on work experience, certifications and such, check LinkedIn. I tend to update that more frequently than this page.\nMy Skills GitHub Stats About Hugo This site was generated with markdown syntax and published with Hugo.\nHugo is a static HTML and CSS website generator written in Go and edited in markdown. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website. Hugo makes building websites fun again. 🤪\nLearn more on GitHub. Complete documentation is available at Hugo Documentation.\nSite Information\rSite generated on:\rTue, 27 Dec 2022 20:52:39 PT\rHugo\rversion:\r0.108.0\rPages generated:\r18\rCategories generated:\r9\rMonth generated:\r2\rSeries generated:\r1\rTags generated:\r20\rYears generated:\r0\r","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/about/","title":"About The Author"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/contact/","title":"Let's, Talk About You"},{"categories":null,"contents":"Privacy Policy devnall.io Privacy Policy devnall.io is a privately owned and operated site run by me.\nMe/I (“us”, “we”, or “our”) operates the devnall website at https://devnall.io (hereinafter referred to as the “Service”).\nThis page informs you of our policies regarding the collection, use and disclosure of personal data when you use our Service and the choices you have associated with that data.\nWe use your data to provide and improve the Service. By using the Service, you agree to the collection and use of information in accordance with this policy.\nComments Comments are disabled to avoid collecting any Personally Identifiable Information. Please feel free to reach out to me, or the guest author, on LinkedIn if you have any feedback.\nEmbedded content from other websites Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.\nThese websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.\nAds Advertisements on devnall.io are paid for in full by the advertisers. This does not in any way, shape or form, constitute an endorsement of a given company or product. It is an advertisement, treat it as such.\nSome of the ads displayed on devnall.io contain a tracking code, in order for the advertiser to track where link clicks originate. vNinja.net does not send any Personally Identifiable Information to any advertisers.\nNo other data is sent to any other 3rd party.\nHow long we retain your data You have the right to know how long we retain your data, and we cannot hold your data indefinitely. We do not retain any Personally Identifiable Information, so that part is pretty easy.\nChanges to This Privacy Policy We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.\nWe will let you know via a prominent notice on our Service, prior to the change becoming effective and update the “effective date” at the top of this Privacy Policy.\nYou are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.\n","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/privacy-policy/","title":"Privacy Policy"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/search/","title":"Search Result"}]