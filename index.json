



























































































































[{"categories":["hugo"],"contents":"Content Organization Trying to find a good way to organize content and this looks like this could be completed with Page Bundles.\nPage Bundles The illustration shows three bundles.\nNote: that the home page bundle cannot contain other content pages, although other files (images etc.) are allowed.\nWithout any additional configuration, the following will automatically work:\n. └── content └── about | └── index.md // \u0026lt;- https://example.com/about/ ├── posts | ├── firstpost.md // \u0026lt;- https://example.com/posts/firstpost/ | ├── happy | | └── ness.md // \u0026lt;- https://example.com/posts/happy/ness/ | └── secondpost.md // \u0026lt;- https://example.com/posts/secondpost/ └── quote ├── first.md // \u0026lt;- https://example.com/quote/first/ └── second.md // \u0026lt;- https://example.com/quote/second/ Summary Information presented here is based on Page Bundles. I will revision if errors or issues occur.\n","date":"December 24, 2022","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/tips/content-org/","title":"Hugo Content Organization"},{"categories":["hugo"],"contents":"Make Site More Informative Add Reading Time to current theme.\nAdd Reading Time to list Page Showing Reading Time is a great addition, by helping visitors to decide if the article is interesting enough to read..ReadingTime is a function of Hugo - which is calculated from the number of words in markdown content.\nAs this is a built in function, this can added.\nUpdate Theme This will vary based on theme and files might be different.\nOpen \u0026lt;theme\u0026gt;/layouts/_defaults/single.html \u0026lt;theme\u0026gt;/layouts/_defaults/post.html and add find author section in geeky-hugo theme location this in:\nAuthor and Publish Date are generated. Notice the \u0026lt;li\u0026gt; \u0026lt;/li\u0026gt; section.\n... TRUNCATED OUTPUT ... \u0026lt;ul class=\u0026#34;list-inline card-meta d-flex align-items-center mb-3\u0026#34;\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item d-flex align-items-center\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-user me-2\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;a href=\u0026#34;{{`about` | relLangURL}}/\u0026#34;\u0026gt;{{site.Params.author}}\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li class=\u0026#34;list-inline-item d-flex align-items-center\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-calendar me-2\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;span\u0026gt;{{ time.Format \u0026#34;:date_long\u0026#34; .PublishDate }}\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; ... TRUNCATED OUTPUT ... Add the following to include read time.\n\u0026lt;span class=\u0026#34;reading\u0026#34;\u0026gt;{{ .ReadingTime }} {{ cond (eq .ReadingTime 1) \u0026#34;minute\u0026#34; \u0026#34;minutes\u0026#34; }} read\u0026lt;/span\u0026gt; Completed code with clock icon added with \u0026lt;i class=\u0026quot;fas fa-clock\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; just lookup Font Awesome Icons\n\u0026lt;li class=\u0026#34;list-inline-item d-flex align-items-center\u0026#34;\u0026gt; \u0026lt;i class=\u0026#34;fas fa-clock\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;span class=\u0026#34;reading\u0026#34;\u0026gt;{{ .ReadingTime }} {{ cond (eq .ReadingTime 1) \u0026#34;minute\u0026#34; \u0026#34;minutes\u0026#34; }} read\u0026lt;/span\u0026gt; \u0026lt;/li\u0026gt; Summary Minor update to improve information. Check out the something interesting: Hugo running on Android\r","date":"December 24, 2022","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/tips/site-info/","title":"Hugo Improve Usability"},{"categories":["android","hugo"],"contents":"Hugo Running on Android Assumption turmux already installed.\nTermux on Android needs to be install. Use apt or pkg to install hugo.\nStep 1 Install Hugo apt install hugo Start server Some reason errors out without --noBuildLock\nhugo server --noBuildLock\rStart building sites …\rhugo v0.109.0+extended android/arm64 BuildDate=unknown\r| EN\r-------------------+-----\rPages | 35\rPaginator pages | 0\rNon-page files | 6\rStatic files | 1\rProcessed images | 64\rAliases | 10\rSitemaps | 1\rCleaned | 0\rBuilt in 981 ms Step 2. Create New Posts Syntax to create a new post: hugo new posts/POST_NAME.md\nCreate a post called index.md hugo new posts/hugoandroid/index.md this creates a directory named posts\nStart writing in markdown and publish in HTML.\nSummary Now we can build with markdown on the go and publish on the fly. Future post setting up Android with necessary tools.\n","date":"December 24, 2022","image":"https://devnall.io/images/post/banner_android_hu409a039fcebec6844eeabc69385732bb_118729_650x0_resize_box_3.png","permalink":"/blog/hugo/android/","title":"Hugo running on Android"},{"categories":["vcode"],"contents":"VSCode Extensions for Markdown Recommend vscode Markdown extensions.\nMarkdown All in One Markdown All in One is a must one for editing Markdown. It contains Markdown preview, keyboard shortcuts, auto preview, and more\u0026hellip;.\nThe shortcuts will make editing Markdown much easy:\nPath completion:\nDictionary Completion Dictionary Completion extension tab complete words and hopefully reduce spelling errors:\nPaste Image Insert more screenshots to Markdown files. Paste Image helps save images with greenshot. This extension supports Mac/Windows/Linux.\nDraw.io Need to draw diagrams. Extension Draw.io Integration:\nSummary Help speed up blogging experience by publishing in markdown then converting HTML with Hugo. Will update as find more useful vscode extensions.\n","date":"December 24, 2022","image":"https://devnall.io/images/post/vscode-md_hu51be5c20beaf80d9f3111e924a350f35_1055416_650x0_resize_box_3.png","permalink":"/blog/vscode/exten-markdown/","title":"VSCode Extensions for Markdown"},{"categories":["hugo","web"],"contents":"Hugo static HTML and CSS website generator Hugo is a static HTML and CSS website generator written in Go and edited in markdown. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website. With its amazing speed and flexibility, Hugo makes building websites fun again.\nLearn more on GitHub. Complete documentation is available at Hugo Documentation.\nStep 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building.\nHaving nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun The best way to learn something is to play with it.\n","date":"January 24, 2021","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/getting-started/","title":"Getting Started with Hugo"},{"categories":["web","hugo"],"contents":"Hugo Setup with git This blog content is generated with Hugo static site generator and integrated with GitHub Pages. This post will step cover publishing and pushing the newest content to GitHub Pages.\nSuggested reading Getting Started with Hugo: Learn more on GitHub. Complete documentation is available at Hugo Documentation.\nStep 1. Create Repositories on GitHub Assumptions already familiar with git commands and GitHub.\nCreate two repos\nName Access Purpose blog public Working local edits for changing adding content myblog.github.io public Syncing output of public folder to github or web server GitHub Pages There are two types of GitHub Pages:\nUser/Organization Pages https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/ Project Pages https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/ Step 2. Create New Site With hugo command create new site blog and change into the directory:\nhugo new site blog cd to blog Run initialize the directory as a git repository\ngit init Initialized empty Git repository... Add the github repository as a remote using git remote\nSubstitute \u0026lt;USERNAME\u0026gt; with your username.\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/blog.git git fetch --all git pull origin main At this point need to choose a them to continue.\nChoose themes Step 3. Installation theme Using the mainroad theme.\nFrom the project\u0026rsquo;s blog root directory, run:\ngit clone https://github.com/vimux/mainroad.git themes/mainroad\nNote: If not planning to making any significant changes but want to track and update the theme, add it as a git submodule via the following command:\ngit submodule add https://github.com/vimux/mainroad.git themes/mainroad Edit config.toml\nSpecify mainroad as default theme in the config.toml file.\ntheme = \u0026#34;mainroad\u0026#34; Change baseurl baseurl = \u0026quot;https://github.com/myblog-hub/myblog.github.io/\u0026quot; this is what will be pointing at the public part of the repo.\nNote: Make sure to end baseurl with a / and also confirm baseurl is set to Project Pages https://\u0026lt;USERNAME|ORGANIZATION\u0026gt;.github.io/\u0026lt;PROJECT\u0026gt;/ If any problems when publishing tweak until works. This runs a\nStep 5. Preview site locally From the project\u0026rsquo;s blog root directory, run:\nhugo server ... TRUNCATED OUTPUT ... Watching for config changes in C:\\..\\..\\blog\\myblog.github.io\\config.toml Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) ... TRUNCATED OUTPUT ... Open browser to http://localhost:1313\nStep 4. Create New Posts Syntax to create a new post: hugo new posts/POST_NAME.md\nCreate a post called mypost.md hugo new posts/mypost.md this creates a directory named posts\nNote: Depending on the theme this might need to be updated in the configuration config.toml as might be reference as post.\nStep 5. Production repo setup In production repo need to make sure have one commit and main branch if this was not already done through GitHub Page.\nIf README.md not added to remote repo then complete following or just add submodule\ngit clone https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io cd myblog.github.io git checkout -b main add README.md git add . git commit -m \u0026#34;adding readme.md\u0026#34; git push origin main Add Submodule From the project\u0026rsquo;s blog root directory add submodule, run:\ngit submodule add -b main https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git public Note: This might fail due to running hugo server cammand, just delete the public folder it will get recreated.\nStep 6. Generate static files Run with the theme used mainroad\nhugo -t mainroad Confirm public dir has been created.\n. ├── archetypes ├── assets ├── config ├── config.toml ├── content ├── data ├── layouts ├── netlify.toml ├── **public** ├── resources ├── static └── themes Confirm remote repo has been added git remote -v:\ngit remote -v origin https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git (fetch) origin https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git (push) Commit changes to production repo:\ncd public git add . git commit -m \u0026#34;init commit\u0026#34; git push origin main Step 7. GitHub Pages From the https://github.com/\u0026lt;USERNAME\u0026gt;/myblog.github.io.git Settings page check Pages section and make sure Branch main /root is selected.\nCheck the actions page and can monitor the workflows deployment.\nIdeas Hosting on Azure Azure storage static Azure Pipelines Azure Container Registry Azure Container Registry Tasks Hosting on AWS Cloudflare Summary The setup is great now website under full source control, build it anytime and host it literally anywhere. That’s not the end of the story!\n","date":"January 24, 2021","image":"https://devnall.io/images/post/hugo-logo_hu5ff7678116e37e4148cba01ab439f068_13782_650x0_resize_box_3.png","permalink":"/blog/hugo/initial-setup/","title":"Hugo Static Blog Site Github"},{"categories":null,"contents":"I architect, implement, administer and troubleshoot servers, network, storage and infrastructure devices local and cloud-based with an interest in DevSecOps. I write about things I am familiar with, things I am learning, and the things that I have had to understand in order to help others understand.\nFor more details on work experience, certifications and such, check LinkedIn. I tend to update that more frequently than this page.\nMy Skills GitHub Stats About Hugo This site was generated with markdown syntax and published with Hugo.\nHugo is a static HTML and CSS website generator written in Go and edited in markdown. It is optimized for speed, ease of use, and configurability. Hugo takes a directory with content and templates and renders them into a full HTML website. Hugo makes building websites fun again. 🤪\nLearn more on GitHub. Complete documentation is available at Hugo Documentation.\n","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/about/","title":"About The Author"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/contact/","title":"Let's, Talk About You"},{"categories":null,"contents":"Privacy Policy devnall.io Privacy Policy devnall.io is a privately owned and operated site run by me.\nMe/I (“us”, “we”, or “our”) operates the devnall website at https://devnall.io (hereinafter referred to as the “Service”).\nThis page informs you of our policies regarding the collection, use and disclosure of personal data when you use our Service and the choices you have associated with that data.\nWe use your data to provide and improve the Service. By using the Service, you agree to the collection and use of information in accordance with this policy.\nComments Comments are disabled to avoid collecting any Personally Identifiable Information. Please feel free to reach out to me, or the guest author, on LinkedIn if you have any feedback.\nEmbedded content from other websites Articles on this site may include embedded content (e.g. videos, images, articles, etc.). Embedded content from other websites behaves in the exact same way as if the visitor has visited the other website.\nThese websites may collect data about you, use cookies, embed additional third-party tracking, and monitor your interaction with that embedded content, including tracking your interaction with the embedded content if you have an account and are logged in to that website.\nAds Advertisements on devnall.io are paid for in full by the advertisers. This does not in any way, shape or form, constitute an endorsement of a given company or product. It is an advertisement, treat it as such.\nSome of the ads displayed on devnall.io contain a tracking code, in order for the advertiser to track where link clicks originate. vNinja.net does not send any Personally Identifiable Information to any advertisers.\nNo other data is sent to any other 3rd party.\nHow long we retain your data You have the right to know how long we retain your data, and we cannot hold your data indefinitely. We do not retain any Personally Identifiable Information, so that part is pretty easy.\nChanges to This Privacy Policy We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.\nWe will let you know via a prominent notice on our Service, prior to the change becoming effective and update the “effective date” at the top of this Privacy Policy.\nYou are advised to review this Privacy Policy periodically for any changes. Changes to this Privacy Policy are effective when they are posted on this page.\n","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/privacy-policy/","title":"Privacy Policy"},{"categories":null,"contents":"","date":"January 1, 1","image":"https://devnall.io/images/author_huea9d061bd187427311552ec59e0cb48b_679442_650x0_resize_box_3.png","permalink":"/search/","title":"Search Result"}]